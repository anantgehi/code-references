Day 1
1. Refer to "Installation Instructions" from day1-data\day1_help & complete.

2. MUST go through "readme_day1"  from day1-data\day1_help\readmes & day1-data\day1_help\slides\PPTDay1.pdf

3. Go through simple code samples from day1-data\code\src

4. Solve 
4.1 Accept 2 double values from User (using Scanner). Check data type.
. If arguments are not doubles , supply suitable error message & terminate.
If numbers are double values , print its average.
Hint : Method of Scanner to use : hasNextDouble , nextDouble 

4.2 Display food menu to user. User will select items from menu along with the quantity. (eg 1. Dosa 2. Samosa 3. Idli ... 10 . Generate Bill ) Assign fixed prices to food items(hard code the prices)
When user enters 'Generate Bill' option(10) , display total bill & exit.
Hint : 
psvm(...) {
sc
boolean exit=false;
double totalBill=0;
while(!exit)
{
  sop("Menu : ...");
  sop("Choose")
  switch(sc.nextInt())
  {
 case 1 : sop("Enter Qty");
 totalBill += (sc.nextInt()*50);
 break;
  case 10 :  sop("Total Bill "+totalBill);
  exit=true;
  break;
  }
}
}

OR 
Create java application for the following
Accept 2 numbers from user & operation to perform
1. Add 2.Subtract 3. Multiply 4.Divide 5.Exit
Display the result of the operation. 
Java app must continue to run till user chooses exit option.

OR
Prompt user for how many numbers(double) to accept
Create suitable data structure to hold these numbers.
Prompt user to populate the values in data structure
Display the same.
Prompt user for option
1. Double nums
2. Square nums
3. Square root nums
4. Exit
As per the option , apply this operation on all nums in the data structure
display the result.

Day 2
1. Revise class work , to understand : encapsulation n abstraction achieved using class.
Revise , mem pics n constructor chaining.

2.Solve Tank assignment along with memory picture.

What will be the output ?

class Tank {
  private int level;
  Tank(int level)
   {
     this.level=level;
   }
  public void setLevel(int level)
  {
    this.level=level;
  }
  public int getLevel()
  {
    return this.level;
  }
}	

public class Assignment {
  public static void main(String[] args) {
    Tank t1 = new Tank(10);
    Tank t2 = new Tank(20);
     s.o.p("1: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1 = t2;
    s.o.p("2: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1.setLevel(27);
     s.o.p("3: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t2.setLevel(t1.getLevel()+10);
     s.o.p("4: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
  }
}


3 . Hands on.

3.1 Create a new folder under your workspace , day2_lab.
Create sub folders : src n bin
Copy Box.java under src.

3.2  Add a method (eg : isEqual)  in the  Box class to compare equality of 2 boxes & test it.
Note  : 2 boxes are equal if & only if , their dimensions are exactly the same.
eg : If box1 has dims : 10 20 30
If box2 has dims : 20 10 30
then method should ret false 
If dims are exactly same  : it should ret true

Hints : From Tester class (eg TestBoxFunctionality.java)
If there are 2 boxes : box1 , box2
How will you invoke the method :
box1.isEqual(box2) OR box2.isEqual(box1)


Now you think about , how will you define this method in the Box class ????
Box class
.....
method declaration
//box1.isEqual(box2)  ---- this =box1 , anotherBox=box2
//box2.isEqual(box1) --- this =box2 , anotherBox =box1
boolean isEqual(Box anotherBox)
{
   .......
}

3.3 Add a method to Box class to return a new Box with modified offset in dimensions & test it with the tester.
eg : Suppose client has ordered 1st Box : 10 20 30
Clnt orders another new box : with ref to 1st box , with offsets in the dims as :  3 -4 -2
App  should create another NEW BOX :13 16 28

Hint : First think about , how will you call it from a tester ?
Box box1=new Box(10, 20, 30);
Box nexBox=box1.createNewBox(3, -4, -2);

n then think about adding the method
Box class
method declaration
Box createNewBox(double wOffset,double dOffset,double hOffset)
{
   ......
}

3.4 Display color of the box , having larger volume.
Box box1=....  600,green
Box box2=...    768 , red
o/p : red

Hint : Do you need any additional state in Box class ? : Yes : private String color;
Any new ctor ? YES : 4 args ---> ctor chaining

Any new methods required ? : YES : getColor


4. If time permits , (otherwise we will solve it tomorrow !)
solve ready code questions from : day2-data\day2_help\params_passing
TestParamPassing1 & TestParamPassing2

Day 3
1. Complete pending work , if required with lab faculty's help

2. Refer to "day3-data\code\day3.1" , project to revise , packages , access specifiers n setting of classpath . (along with the readmes)

3. import "day3-data\code\day3.2" , eclipse project in your workspace , to revise array of primitive types n array of references.

4. Hands on
 
4.1 Create a class Point2D , in package - "com.app.geometry"   : for representing a point in x-y co-ordinate system.

4.2 Create a parameterized constructor to init x & y co-ords.

4.3 Add a method to return string form of  point's x & y co-ords
Hint :  public String getDetails()) 

4.4 Add isEqual method to Point2D class :a boolean returning method : must return true if n only if both points are having same x,y co-ords or false otherwise.

4.5 Add calculateDistance method to calculate distance between current point and specified point & return the distance to the caller.
Hint : Use distance formula . Use java.lang.Math class methods --sqrt, pow etc.

4.6 Write TestPoint class , in package "tester" , with a main method
Accept co ordinates of 2 points from user (Scanner) --to create 2 points (p1 & p2)

4.7 Use getDetails method to display point details.(p1's details & p2's details)

4.8 Invoke isEqual & display if points are same or different (i.e p1 & p2 are located at the same position)

4.9 If they are not located at the same position , display distance between p1 & p2 , otherwise simply give a message : "points at the same position"


4.10 If time permits...
Create another  class , in the "tester" package "TestPointArray" , with main(..)
Ask user , how many points to plot.
Accept x,y co-ordinates for all the points n store it suitably.
Display x,y co-ordinates of all the points plotted so far.

5. Optional assignment.
Continue with earlier created Box.java.
Ask user(client) , how many boxes to make ?
Accept Box dims for these boxes.
Store these details suitably.
Double box width for all boxes having volume > 100.(MUST USE for-each & solve this)

Day 1
1. Refer to "Installation Instructions" from day1-data\day1_help & complete.

2. MUST go through "readme_day1"  from day1-data\day1_help\readmes & day1-data\day1_help\slides\PPTDay1.pdf

3. Go through simple code samples from day1-data\code\src

4. Solve 
4.1 Accept 2 double values from User (using Scanner). Check data type.
. If arguments are not doubles , supply suitable error message & terminate.
If numbers are double values , print its average.
Hint : Method of Scanner to use : hasNextDouble , nextDouble 

4.2 Display food menu to user. User will select items from menu along with the quantity. (eg 1. Dosa 2. Samosa 3. Idli ... 10 . Generate Bill ) Assign fixed prices to food items(hard code the prices)
When user enters 'Generate Bill' option(10) , display total bill & exit.
Hint : 
psvm(...) {
sc
boolean exit=false;
double totalBill=0;
while(!exit)
{
  sop("Menu : ...");
  sop("Choose")
  switch(sc.nextInt())
  {
 case 1 : sop("Enter Qty");
 totalBill += (sc.nextInt()*50);
 break;
  case 10 :  sop("Total Bill "+totalBill);
  exit=true;
  break;
  }
}
}

OR 
Create java application for the following
Accept 2 numbers from user & operation to perform
1. Add 2.Subtract 3. Multiply 4.Divide 5.Exit
Display the result of the operation. 
Java app must continue to run till user chooses exit option.

OR
Prompt user for how many numbers(double) to accept
Create suitable data structure to hold these numbers.
Prompt user to populate the values in data structure
Display the same.
Prompt user for option
1. Double nums
2. Square nums
3. Square root nums
4. Exit
As per the option , apply this operation on all nums in the data structure
display the result.

Day 2
1. Revise class work , to understand : encapsulation n abstraction achieved using class.
Revise , mem pics n constructor chaining.

2.Solve Tank assignment along with memory picture.

What will be the output ?

class Tank {
  private int level;
  Tank(int level)
   {
     this.level=level;
   }
  public void setLevel(int level1)
  {
    level=level1;
  }
  public int getLevel()
  {
    return level;
  }
}	

public class Assignment {
  public static void main(String[] args) {
    Tank t1 = new Tank(10);
    Tank t2 = new Tank(20);
     s.o.p("1: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1 = t2;
    s.o.p("2: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1.setLevel(27);
     s.o.p("3: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t2.setLevel(t1.getLevel()+10);
     s.o.p("4: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
  }
}


3 . Hands on.

3.1 Create a new folder under your workspace , day2_lab.
Create sub folders : src n bin
Copy Box.java under src.

3.2  Add a method (eg : isEqual)  in the  Box class to compare equality of 2 boxes & test it.
Note  : 2 boxes are equal if & only if , their dimensions are exactly the same.
eg : If box1 has dims : 10 20 30
If box2 has dims : 20 10 30
then method should ret true. 
If dims are different : it should ret false.

Hints : From Tester class (eg TestBoxFunctionality.java)
If there are 2 boses : box1 , box2
How will you invoke the method ????

Now you think about , how will you define this method in the Box class ????

3.3 Add a method to Box class to return a new Box with modified offset in dimensions & test it with the tester.
eg : Suppose client has ordered 1st Box : 10 20 30
Clnt orders another new box : with ref to 1st box , with offsets in the dims as :  3 -4 -2
App  should create another NEW BOX :13 16 28

Hint : First think about , how will call it from a tester n then think about adding the method

3.3 Display color of the box , having larger volume.
Hint : Do you need any additional state in Box class ? 
Any new methods required ?

4. If time permits , (otherwise we will solve it tomorrow !)
solve ready code questions from : day2-data\day2_help\params_passing
TestParamPassing1 & TestParamPassing2

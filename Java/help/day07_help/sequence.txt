Today's Topics
Mem pic to understand run time polymorphism
Revise interfaces
Object class method :  equals (reading H.W)
Exception Handling 


Query : why overrding form of the method can't reduce visibility ?
eg : 
A.java
package p1;
public class A
{
 public void show() {...}
}

B.java
 public class B extends A
{
  void show() {...}  //javac err
}

Why ?
package tester;
public class Test : main
A a1=new A();
a1.show(); 
a1=new B();
a1.show();

------------------------------
Solve this. What will happen ?
package p1;
public class MySuperClass {
	static {
		System.out.println(3);
	}
	{
		System.out.println(4);
	}
}
package p1;

public class TestInstanceInitBlock extends MySuperClass {
	private int i;

	public static void main(String[] args) {
		System.out.println("in main");
		TestInstanceInitBlock t1 = new TestInstanceInitBlock();
	//	TestInstanceInitBlock t2 = new TestInstanceInitBlock(10);
	}

	static {
		System.out.println(1);
	}
	{
		System.out.println(5);
	}
	

	public TestInstanceInitBlock() {
		System.out.println(2);
	}

	public TestInstanceInitBlock(int i) {
		super();
		System.out.println(6);
		this.i = i;
	}
}
-------------------------------
Revise 
What is an interface (i/f) : blue print of a class , consists of specs.(WHAT)
Why ? 
1. Complete abstraction
2. multiple inheritance
3. separation : loose coupling (separation between WHAT : specs vs HOW : imple)

Till JDK 1.7 : What does i/f  mainly contain ?
data members : public static final
methods : public abstract

Legal Relationships 
Can 1 class imple multiple i/fs : YES (implements)
Can 1 i/f extend from multiple i/fs : YES (extends)
Can 1 class extend from multiple super classes : NO
Can 1 i/f be implemented by multiple imple classes ? : YES (implements)
Can imple class access i/f constants directly(w/o using i/fName.memberName) : YES
Can non imple class access i/f constants directly(w/o using i/fName.memberName) : NO
(can access it as : i/fName.memberName)

Objectives
0. Create different type of Printers(ConsolePrinter, FilePrinter ,NetworkPrinter) n access it's common functionality n specific functionality in a single for-each loop.

1. Demo : Create a class implementing multiple i/fs .
Will you face ambiguity issue with extact duplicate behaviour ? :  NO
Same Method names  with different signature : NO 
Same Method names  same signature n different ret type : javac err (ambiguity!)
2. Demo : Create a class implementing multiple i/fs .
Will you face ambiguity issue with duplicate data members ? YES 
How to resolve : i/fName.memberName
3. Demo : 1 i/f extending multiple super i/fs , n then write imple class
In order to create concrete imple class : MUST imple all inherited abstract behaviour.

4. Marker i/f : Empty (Tag i/f) i/f --NO data members n no methods
eg : Serializable , Cloneable

5. Functional i/f : i/f containing single abstract method (SAM)
Java 8 added annotation : @FunctionalInterface : i/f level annotation

6. Demo : Shapes scenario using i/f n abstract class.
(refer to diag : "abstraction scenario")
-----------------------

7. Enter Exception Handling : 
What is Exception ? : run time error , detected by JVM (typically by main thread)

Why Exception handling ?
1. To allow the continuation of java app , even in case of run time errors.
2. Reduces the need for checking validation of ret types.
3. Allows a Separation between business logic n error handling

Flow , inheritance hierarchy , checked vs un checked excs
keywords : try, catch , finally , throw , throws , try-with-resources
------------------------
Pending !

Custom exceptions
Objective : Validate speed of running vehicle on a highway
min speed : 30
max speed : 80
Vehicle speed : 20 / 100 /60
This validation err : can not be detected by JVM.
Must be done by the prog : keyword : throw new SpeedOutOfRangeException("too slow / too fast");







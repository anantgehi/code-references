Any Specific questions ?
Q & A session


Today's topics 
HashMap Implementation
Java 8 New Features
Lambda Expressions
Java 8 Streams

Revise

Why Hashing  ?

Hashing is a technique to make things more efficient by effectively narrowing down the search 

What is hashing?

Hashing means using some function or algorithm to map object data to some representative integer value.

This  hash code (or simply hash) can then be used as a way to narrow down our search when looking for the item in the hash-based data structure (eg : HashSet,LinkedHashSet,HashMap,LinkedHashMap,Hashtable...)

If you want to add elements(refereneces) in hashing based data structure, which contract to be followed between hashCode n equals?

Mandatory : Equal objects MUST produce SAME hash code

Optional BUT Recommended : Un equal objects SHOULD produce (for the improvemnt of hashtable) distinct hashcodes.

HOW ?
1. Identify PK n override equals
2. Use same fields (PK) in generating hashcode
Hint : Use prime nos in generation of hash codes
 eg : String , Wrapper class(Integer,Double....) , Date , LocalDate....
: Have already followed contract(both of the branches)

eg : HashMap<Integer,BankAccount> accts=new HM<>();//size=0,capa=16, L.F =.75
sop(hm.put(101,new BankAccount(101,......));//new entry : inserted Node : hash | k1 | v1 | next=null
rets null
sop(hm.put(101,new BankAccount(101,......));//existing entry : replaces old value by new value , rets old val ref.

sop(hm.putIfAbsent(101,new BankAccount(101,......));//existing entry : DOES NOT replace old value by new value , rets old val ref.

Objective : Banking application using HashMap

BankAccount : acctNo , type(enum) , balance , creationDate , customerName
ctor, toString
B.L
withdraw,deposit, transferFunds...

1.1Store a/c details in a suitable map to ensure const time performance for : put/get/remove...
What will the type of the map ? : HashMap<K,V>
K : acct no (int) ---> Integer
V : Account details (BankAccount)
eg : HashMap<Integer,BankAccount>

1.2  Create a populated map with sample data.

1.3 Create A/C

1.4 Display details of all accts

1.5  Get A/C summary
i/p acct number => searching by key based criteria : ready made method : get

1.6 Funds Transfer

1.7 Close A/C 

1.8 Display all account details of specific account type
i/p : a/c type
search criteria : acType : value based criteria ---convert it into Collection view ---> iterate n  filter

1.9 Search A/cs by balance > specific balance , display their details.

1.10 Remove all loan accounts.
remove --value based criteria --convert into Collection view : values --Collection<BankAccount>
-----------------------------
Refer to "java8_new_features.txt"

Refer to "regarding lambdas"

Objectives


1. Create your own functional interface n use it in lambda expression
eg : Perform ANY arithmetic operation on 2 double values & return the result
eg --add/multiply/subtract/divide....

1.1 Create i/f : SAM => Functional i/f
1.2 Create an i/f : ComputationUtils :  to add a static method
to return  result of  ANY operation performed on 2 double operands
static double computeResult(double a,double b,Operation op)
{
 return op.performAnyOperation(a,b);
}

1.3 Create a Tester n use it.


Explore Existing higher order functions

2. Collection : forEach 

3. Collection : removeIf

4. Map : forEach

5. Sorting : custom ordering


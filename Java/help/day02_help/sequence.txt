Today's topics
 
JVM Architecture
Enter OOPs  -- encapsulation , data hiding
(achieved via class programming)
GC
Packages , classpath & access sepcifiers

Revise

Java Data Types : which 2 categories : primitive type : value holder
non numeric n numeric types


reference types : address of the object dynamically created on the heap
class type ref , array type ref , interface type ref


Types of conversion in prim types 
auto promotion(widening) : javac : implicit
eg : long --> float ,int -->long , float --> double

explict narrowing conversion : type casting -- prog
eg : double --> float ,int--> byte , float --> long

solve : 

byte b1=10;
int data=b1;//widening : no err
float f=23.45;//javac err
double d1=f;//widening  : no err
long l1=454654;//widening  : no err
f=l1;//widening  : no err

Answer this 
What will data type of result of
1. byte & byte : int
2. byte & short : int
3. short & short : int
4. int & long : long
5. long & float : float
6. float & double : double
7. byte/short/int....& double : double


JVM Architecture


1. Class loader : lazy loading policy(on demand) to load required classes in JVM's memory(meta space)
2. Run time data areas
2.1 Method area : metaspace, 1 single copy per JVM , byte code information(class info), static data memebrs
2.2 Heap : 1 single copy per JVM , dynamically created objects(state : non static data members)

2.3 Stacks : 1 per thread.
System threads : main thrd --looks for main(...) & execs sequentially
GC

main thrd's stack : stack frames (1 per method call)
stack frm : method local information : method args , local vars, ret values
main(..) ---> m1() --> m2()

stack : ??


---------------------------
Enter OOP
refer to "regarding class n object"

Encapsulation -- Class Programming (refer to 
class,object,state,behaviour
Objective --
Create a class to represent 3D Box
class Box ---tight encapsulation(achieved by making all non static data members:instance vars private)
state -- width,height , depth --- double : private 
paramterized constr --3 arg constr.
Instance Methods : for supplying Business logic(B.L)
1. To return Box details in String form (dimensions of Box)
eg : String getBoxDetails()
method declaration --- access specifier(private/default/protected/public) , ret type , name , args
method definition --body

2. To return computed volume of the box.


this --keyword in java
Usages
1. To un-hide instance variable from local variable.
eg : this.width=width;

2. To invoke constructor of the same class , from different constructor.(constr chaining)
eg : this(side,side,side);


Create another class : TestBox --for  UI.
Add psvmain(..){...}
Use scanner --to accept box dims from user, create box instance.
display its details & volume.

-----------------
Pointers vs java references
Similarity -- Pointer & reference --hold an address of the object created on heap.
Difference -- To add robustness to the language ,
pointer arithmatic is not allowed in java.

reference --- holds internal representation of address --

eg : 
Box b1=new Box(1,2,3);
b1++;//javac err
b1 += 10; //javac err
String s=new String("hello");
s ++;//javac err
s += 10;//s = s + 10;no javac err

------------------
Add more business logic in the Box class

1. Create Cubes
sop("Enter side of a cube");
Box cube=new Box(sc.nextDouble());//javac err

Soln : constructor overloading (constr chaining)

1.5 Create a box with dims = -1,-1 , -1



Mem pictures
Garbage Collection : refer to "regarding GC"

